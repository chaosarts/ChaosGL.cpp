/*
 * Shader.h
 *
 *  Created on: 07.03.2016
 *      Author: chaos
 */

#ifndef _ChaosGL_Shader_h_
#define _ChaosGL_Shader_h_

#include <vector>
#include <unistd.h>
#include <sys/stat.h>
#include <OpenGL/gl.h>
#include <OpenGL/gl3.h>
#include <ChaosCore/core.h>
#include "Exception.hpp"

using namespace std;

namespace ca
{
	namespace gl
	{
		class Shader
		{
		private:

			/** Internal flag, that indicates if the heretofore added sources has been compiled */
			bool _compiled = false;

			/** Internal flag, that indicates if the heretofore added sources has been compiled */
			bool _initialized = false;

			/** Provides the shader id, generated by glCreateShader */
			GLuint _id = 0;

			/** Provides a list of GLSL source strings */
			vector<const char*> _sources;


		public:

			/**
			 * Provides the shader type
			 */
			const GLenum type;


			/**
			 * Constructor with source and length of source
			 * @param type The shader type (GL_VERTEX_SHADER etc.)
			 * @param source The source string
			 * @param length
			 */
			Shader(GLenum type, const char* source, int length);


			/**
			 * Constructor with source as file
			 * @param type The shader type (GL_VERTEX_SHADER etc.)
			 * @param filename
			 */
			Shader(GLenum type, const char* filename);


			/**
			 * Constructor with no source
			 * @param type The shader type (GL_VERTEX_SHADER etc.)
			 */
			Shader(GLenum type);


			/**
			 * Destructor
			 */
			virtual ~Shader();


			/**
			 * Initializes the shader by calling glCreateShader and glShaderSource
			 */
			GLint init ();


			/**
			 * Compiles the shader sources
			 */
			GLint compile ();


			/**
			 * Returns the id of the shader
			 * @return The id of the shader
			 */
			GLuint getId ();


			/**
			 * Returns information about the shader to givn parameter name
			 * @param type
			 */
			GLint getParam (GLenum pname);


			/**
			 * Shortcut for getParam(GL_COMPILE_STATUS)
			 * @return The compile status
			 */
			GLint getCompileStatus ();


			/**
			 * Shortcut for getParam(GL_COMPILE_STATUS)
			 * @return The compile status
			 */
			GLint getDeleteStatus ();


			/**
			 * Shortcut for getParam(GL_INFO_LOG_LENGTH)
			 * @return The compile status
			 */
			GLint getInfoLogLength ();


			/**
			 * Shortcut for getParam(GL_SOURCE_LENGTH)
			 * @return The compile status
			 */
			GLint getSourceLength ();


			/**
			 * Returns the info log of the shader
			 */
			const char* getInfoLog ();


			/**
			 * Adds a new source string to the shader. This
			 * invokes to mark the shader as 'dirty'.
			 */
			void addSource (const char* source, int length);


			/**
			 * Adds a new source string as file to the shader. This
			 * invokes to mark the shader as 'dirty'.
			 */
			void addSource (const char* filename);
		};
	}

} /* namespace creategl */

#endif /* SHADER_H_ */
